{
  "Settings": "Settings",
  "Add a new startingDom": "Add a new startingDom",
  "Add a new endingDom": "Add a new endingDom",
  "Move": "Move",
  "startingDom has been added": "startingDom has been added",
  "endingDom has been added": "endingDom has been added",
  "subscription (pubsub subscription name, type: string)": "subscription (pubsub subscription name, type: string)",
  "muiltipleProjectile (whether multiple throwable objects are allowed to appear, type: boolean)": "muiltipleProjectile (whether multiple throwable objects are allowed to appear, type: boolean)",
  "projectile (projectile, if you want to add className, you need to write the style globally, support jsx writing, type: ReactNode)": "projectile (projectile, if you want to add className, you need to write the style globally, support jsx writing, type: ReactNode)",
  "duration (the duration of the throwing animation, unit: seconds, type: number)": "duration (the duration of the throwing animation, type: number)",
  "zIndex (set the zIndex of the projectile, type: number)": "zIndex (set the zIndex of the projectile, type: number)",
  "needEndingDomAnimation (whether endingDom needs to animate after being hit by a projectile, type: boolean)": "needEndingDomAnimation (whether endingDom needs to animate after being hit by a projectile, type: boolean)",
  "projectileMovmentEnd (projectile motion animation end callback, type: function) For example: () => { console.log(1) }": "projectileMovmentEnd (projectile motion animation end callback, type: function) For example: () => { console.log(1) }",
  "endingDomAnimationEnd (endingDom animation end callback, type: function) For example: () => { console.log(1) }": "endingDomAnimationEnd (endingDom animation end callback, type: function) For example: () => { console.log(1) }",
  "endingDomAnimationDuration (endingDom animation duration after being hit by a projectile, unit: seconds, type: number)": "endingDomAnimationDuration (endingDom animation duration after being hit by a projectile, unit: seconds, type: number)",
  "endingDomAnimationName (the name of the animation after endingDom is hit by a projectile. The animation needs to be defined globally, type: string. This Demo has built-in animate.css. If the project needs to use it, please install it first and perform npm install animate.css --save and then import it globally. import 'animate.css', or introduce the required styles as needed, please refer to": "endingDomAnimationName (the name of the animation after endingDom is hit by a projectile. The animation needs to be defined globally, type: string. This Demo has built-in animate.css. If the project needs to use it, please install it first and perform npm install animate.css --save and then import it globally. import 'animate.css', or introduce the required styles as needed, please refer to",
  "additionalTransformValueInAnimate (supplementary animation transform value. After passing in this value, a new class name will be generated. This class will integrate all frames except the last frame of the keyframe corresponding to endingDomAnimationName to form a new class, which can then be used by endingDom. It can be set rotate scale translate skew and other values, if you set multiple values, please separate them with spaces)": "additionalTransformValueInAnimate (supplementary animation transform value. After passing in this value, a new class name will be generated. This class will integrate all frames except the last frame of the keyframe corresponding to endingDomAnimationName to form a new class, which can then be used by endingDom. It can be set rotate scale translate skew and other values, if you set multiple values, please separate them with spaces)",
  "wrapClassName (class name of the outer container of the projectile, type: string)": "wrapClassName (class name of the outer container of the projectile, type: string)",
  "isInitialYAxisReverse (whether the initial velocity of the projectile motion is in the opposite direction of the y-axis, type: boolean)": "isInitialYAxisReverse (whether the initial velocity of the projectile motion is in the opposite direction of the y-axis, type: boolean)",
  "projectileTransition (if the transition attribute of a custom projectile is passed in, duration and isInitialYAxisReverse will be invalid, type: string)": "projectileTransition (if the transition attribute of a custom projectile is passed in, duration and isInitialYAxisReverse will be invalid, type: string)",
  "Cancel": "Cancel",
  "Save": "Save",
  "Example of pass parameter": "Example of pass parameter",
  "Pass parameter": "Pass parameter",
  "Not a legal function": "Not a legal function",
  "Not a legal dom": "Not a legal dom",
  "startingDom.current is the starting position of the projectile motion specified by the user": "startingDom.current is the starting position of the projectile motion specified by the user",
  "endingDom.current is the end position of the parabolic motion specified by the user": "endingDom.current is the end position of the parabolic motion specified by the user",
  "Image loading failed, please refresh the page":"Image loading failed, please refresh the page"
}